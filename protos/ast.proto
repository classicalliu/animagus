syntax = "proto3";

package ast;

option go_package = "github.com/xxuejie/animagus/pkg/ast";

enum Field {
  CAPACITY = 0;
  DATA = 1;
  LOCK = 2;
  TYPE = 3;

  CODE_HASH = 4;
  HASH_TYPE = 5;
  ARGS = 6;
}

enum Op {
  HASH = 0;
  NOT = 1;

  GET = 2;
  SLICE_BYTES = 3;
  PLUS = 4;
  MINUS = 5;
  EQUAL = 6;
  AND = 7;
  OR = 8;
  LESS = 9;
  LESS_OR_EQUAL = 10;

  LEN = 11;

  INDEX = 12;
}

message Value {
  enum Type {
    // Primitive fields
    UINT64 = 0;
    BOOL = 1;
    BYTES = 2;
    LIVE_CELL = 3;
    FIELD = 4;
    OP = 5;
    NIL = 6;

    // In animagus, we distinguish args and params in the following way:
    // * If a Value struct contains an arg, it will be interpretted as a
    // function, when used in constructs such as REDUCE or MAP, args acts
    // as placeholders for the values to test/transform.
    // * Params, on the other hand, denotes user input when calling RPCs,
    // for example, a user might provide an amount to transfer, or an address
    // to transfer to, those will be represented via parameters
    ARG = 7;
    PARAM = 8;

    // Compound fields
    LIST = 33;
    APPLY = 34;
    REDUCE = 35;

    // Blockchain data structures
    SCRIPT = 65;
    CELL = 66;
  }
  Type t = 1;
  oneof primitive {
    bool b = 2;
    uint64 u = 3;
    bytes raw = 4;
    Field field = 5;
    Op op = 6;
  }
  List l = 7;
  repeated Value children = 8;
}

message List {
  enum Type {
    EMPTY = 0;
    CONS = 1;
    QUERY_CELLS = 2;
    MAP = 3;
    FILTER = 4;
    SLICE = 5;
    CONCAT = 6;
    // TODO: ZIP
  }
  Type t = 1;
  repeated Value values = 2;
  repeated List children = 3;
}

message Call {
  string name = 1;
  Value result = 3;
}

message Root {
  repeated Call calls = 1;
}
