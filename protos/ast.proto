syntax = "proto3";

package ast;

option go_package = "github.com/xxuejie/animagus/pkg/ast";

message Value {
  enum Type {
    // Primitive fields
    UINT64 = 0;
    NIL = 1;
    BOOL = 2;
    BYTES = 3;

    // In animagus, we distinguish args and params in the following way:
    // * If a Value struct contains an arg, it will be interpretted as a
    // function, when used in constructs such as REDUCE or MAP, args acts
    // as placeholders for the values to test/transform.
    // * Params, on the other hand, denotes user input when calling RPCs,
    // for example, a user might provide an amount to transfer, or an address
    // to transfer to, those will be represented via parameters
    ARG = 16;
    PARAM = 17;
    // Blockchain data structures
    OUT_POINT = 18;
    CELL_DEP = 19;
    SCRIPT = 20;
    CELL = 21;
    TRANSACTION = 22;

    // Compound fields
    APPLY = 23;
    REDUCE = 24;

    // List fields
    LIST = 25;
    QUERY_CELLS = 26;
    MAP = 27;
    FILTER = 28;

    // Cell get operations
    GET_CAPACITY = 48;
    GET_DATA = 49;
    GET_LOCK = 50;
    GET_TYPE = 51;
    GET_DATA_HASH = 52;

    // Script get operations
    GET_CODE_HASH = 53;
    GET_HASH_TYPE = 54;
    GET_ARGS = 55;

    // Operations
    HASH = 73;

    NOT = 74;
    AND = 75;
    OR = 76;
    XOR = 77;

    EQUAL = 78;
    LESS = 79;

    LEN = 80;
    SLICE = 81;
    INDEX = 82;

    PLUS = 83;
    MINUS = 84;
  }
  Type t = 1;
  oneof primitive {
    bool b = 2;
    uint64 u = 3;
    bytes raw = 4;
  }
  repeated Value children = 8;
}

message Call {
  string name = 1;
  Value result = 3;
}

message Root {
  repeated Call calls = 1;
}
