// Code generated by protoc-gen-go. DO NOT EDIT.
// source: generic.proto

package generic

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	ast "github.com/xxuejie/animagus/pkg/ast"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GenericParams struct {
	Name                 string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Params               []*ast.Value `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GenericParams) Reset()         { *m = GenericParams{} }
func (m *GenericParams) String() string { return proto.CompactTextString(m) }
func (*GenericParams) ProtoMessage()    {}
func (*GenericParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c692b03a02b431c, []int{0}
}

func (m *GenericParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericParams.Unmarshal(m, b)
}
func (m *GenericParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericParams.Marshal(b, m, deterministic)
}
func (m *GenericParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericParams.Merge(m, src)
}
func (m *GenericParams) XXX_Size() int {
	return xxx_messageInfo_GenericParams.Size(m)
}
func (m *GenericParams) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericParams.DiscardUnknown(m)
}

var xxx_messageInfo_GenericParams proto.InternalMessageInfo

func (m *GenericParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GenericParams) GetParams() []*ast.Value {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*GenericParams)(nil), "generic.GenericParams")
}

func init() { proto.RegisterFile("generic.proto", fileDescriptor_4c692b03a02b431c) }

var fileDescriptor_4c692b03a02b431c = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4f, 0xcd, 0x4b,
	0x2d, 0xca, 0x4c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0xa5, 0x38, 0x13,
	0x8b, 0x4b, 0x20, 0x62, 0x4a, 0xee, 0x5c, 0xbc, 0xee, 0x10, 0xd1, 0x80, 0xc4, 0xa2, 0xc4, 0xdc,
	0x62, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20,
	0x30, 0x5b, 0x48, 0x89, 0x8b, 0xad, 0x00, 0x2c, 0x2b, 0xc1, 0xa4, 0xc0, 0xac, 0xc1, 0x6d, 0xc4,
	0xa5, 0x07, 0x32, 0x20, 0x2c, 0x31, 0xa7, 0x34, 0x35, 0x08, 0x2a, 0x63, 0x54, 0xc0, 0xc5, 0x07,
	0x35, 0x28, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0x48, 0x87, 0x8b, 0xc5, 0x39, 0x31, 0x27,
	0x47, 0x48, 0x4c, 0x0f, 0xe6, 0x0c, 0x14, 0x9b, 0xa4, 0x90, 0x4c, 0x51, 0x62, 0x10, 0x32, 0xe0,
	0x62, 0x0b, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x25, 0x4e, 0xbd, 0x01, 0xa3, 0x93, 0x66, 0x94, 0x7a,
	0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x45, 0x45, 0x69, 0x6a, 0x56,
	0x66, 0xaa, 0x7e, 0x62, 0x5e, 0x66, 0x6e, 0x62, 0x7a, 0x69, 0xb1, 0x7e, 0x41, 0x76, 0xba, 0x3e,
	0xd4, 0xa0, 0x24, 0x36, 0xb0, 0x67, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x34, 0x56, 0xfa,
	0x35, 0x11, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GenericServiceClient is the client API for GenericService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GenericServiceClient interface {
	Call(ctx context.Context, in *GenericParams, opts ...grpc.CallOption) (*ast.Value, error)
	Stream(ctx context.Context, in *GenericParams, opts ...grpc.CallOption) (GenericService_StreamClient, error)
}

type genericServiceClient struct {
	cc *grpc.ClientConn
}

func NewGenericServiceClient(cc *grpc.ClientConn) GenericServiceClient {
	return &genericServiceClient{cc}
}

func (c *genericServiceClient) Call(ctx context.Context, in *GenericParams, opts ...grpc.CallOption) (*ast.Value, error) {
	out := new(ast.Value)
	err := c.cc.Invoke(ctx, "/generic.GenericService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genericServiceClient) Stream(ctx context.Context, in *GenericParams, opts ...grpc.CallOption) (GenericService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GenericService_serviceDesc.Streams[0], "/generic.GenericService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &genericServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GenericService_StreamClient interface {
	Recv() (*ast.Value, error)
	grpc.ClientStream
}

type genericServiceStreamClient struct {
	grpc.ClientStream
}

func (x *genericServiceStreamClient) Recv() (*ast.Value, error) {
	m := new(ast.Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GenericServiceServer is the server API for GenericService service.
type GenericServiceServer interface {
	Call(context.Context, *GenericParams) (*ast.Value, error)
	Stream(*GenericParams, GenericService_StreamServer) error
}

// UnimplementedGenericServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGenericServiceServer struct {
}

func (*UnimplementedGenericServiceServer) Call(ctx context.Context, req *GenericParams) (*ast.Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (*UnimplementedGenericServiceServer) Stream(req *GenericParams, srv GenericService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterGenericServiceServer(s *grpc.Server, srv GenericServiceServer) {
	s.RegisterService(&_GenericService_serviceDesc, srv)
}

func _GenericService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generic.GenericService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericServiceServer).Call(ctx, req.(*GenericParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenericService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenericParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GenericServiceServer).Stream(m, &genericServiceStreamServer{stream})
}

type GenericService_StreamServer interface {
	Send(*ast.Value) error
	grpc.ServerStream
}

type genericServiceStreamServer struct {
	grpc.ServerStream
}

func (x *genericServiceStreamServer) Send(m *ast.Value) error {
	return x.ServerStream.SendMsg(m)
}

var _GenericService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "generic.GenericService",
	HandlerType: (*GenericServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _GenericService_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _GenericService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "generic.proto",
}
