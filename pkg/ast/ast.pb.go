// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ast.proto

package ast

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Field int32

const (
	Field_CAPACITY  Field = 0
	Field_DATA      Field = 1
	Field_LOCK      Field = 2
	Field_TYPE      Field = 3
	Field_CODE_HASH Field = 4
	Field_HASH_TYPE Field = 5
	Field_ARGS      Field = 6
)

var Field_name = map[int32]string{
	0: "CAPACITY",
	1: "DATA",
	2: "LOCK",
	3: "TYPE",
	4: "CODE_HASH",
	5: "HASH_TYPE",
	6: "ARGS",
}

var Field_value = map[string]int32{
	"CAPACITY":  0,
	"DATA":      1,
	"LOCK":      2,
	"TYPE":      3,
	"CODE_HASH": 4,
	"HASH_TYPE": 5,
	"ARGS":      6,
}

func (x Field) String() string {
	return proto.EnumName(Field_name, int32(x))
}

func (Field) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_37b5b141da493253, []int{0}
}

type Op int32

const (
	Op_HASH          Op = 0
	Op_NOT           Op = 1
	Op_GET           Op = 2
	Op_SLICE_BYTES   Op = 3
	Op_PLUS          Op = 4
	Op_MINUS         Op = 5
	Op_EQUAL         Op = 6
	Op_AND           Op = 7
	Op_OR            Op = 8
	Op_LESS          Op = 9
	Op_LESS_OR_EQUAL Op = 10
	Op_LEN           Op = 11
	Op_INDEX         Op = 12
)

var Op_name = map[int32]string{
	0:  "HASH",
	1:  "NOT",
	2:  "GET",
	3:  "SLICE_BYTES",
	4:  "PLUS",
	5:  "MINUS",
	6:  "EQUAL",
	7:  "AND",
	8:  "OR",
	9:  "LESS",
	10: "LESS_OR_EQUAL",
	11: "LEN",
	12: "INDEX",
}

var Op_value = map[string]int32{
	"HASH":          0,
	"NOT":           1,
	"GET":           2,
	"SLICE_BYTES":   3,
	"PLUS":          4,
	"MINUS":         5,
	"EQUAL":         6,
	"AND":           7,
	"OR":            8,
	"LESS":          9,
	"LESS_OR_EQUAL": 10,
	"LEN":           11,
	"INDEX":         12,
}

func (x Op) String() string {
	return proto.EnumName(Op_name, int32(x))
}

func (Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_37b5b141da493253, []int{1}
}

type Value_Type int32

const (
	// Primitive fields
	Value_UINT64    Value_Type = 0
	Value_BOOL      Value_Type = 1
	Value_BYTES     Value_Type = 2
	Value_LIVE_CELL Value_Type = 3
	Value_FIELD     Value_Type = 4
	Value_OP        Value_Type = 5
	Value_NIL       Value_Type = 6
	// In animagus, we distinguish args and params in the following way:
	// * If a Value struct contains an arg, it will be interpretted as a
	// function, when used in constructs such as REDUCE or MAP, args acts
	// as placeholders for the values to test/transform.
	// * Params, on the other hand, denotes user input when calling RPCs,
	// for example, a user might provide an amount to transfer, or an address
	// to transfer to, those will be represented via parameters
	Value_ARG   Value_Type = 17
	Value_PARAM Value_Type = 18
	// Compound fields
	Value_LIST   Value_Type = 33
	Value_APPLY  Value_Type = 34
	Value_REDUCE Value_Type = 35
	// Blockchain data structures
	Value_SCRIPT Value_Type = 65
	Value_CELL   Value_Type = 66
)

var Value_Type_name = map[int32]string{
	0:  "UINT64",
	1:  "BOOL",
	2:  "BYTES",
	3:  "LIVE_CELL",
	4:  "FIELD",
	5:  "OP",
	6:  "NIL",
	17: "ARG",
	18: "PARAM",
	33: "LIST",
	34: "APPLY",
	35: "REDUCE",
	65: "SCRIPT",
	66: "CELL",
}

var Value_Type_value = map[string]int32{
	"UINT64":    0,
	"BOOL":      1,
	"BYTES":     2,
	"LIVE_CELL": 3,
	"FIELD":     4,
	"OP":        5,
	"NIL":       6,
	"ARG":       17,
	"PARAM":     18,
	"LIST":      33,
	"APPLY":     34,
	"REDUCE":    35,
	"SCRIPT":    65,
	"CELL":      66,
}

func (x Value_Type) String() string {
	return proto.EnumName(Value_Type_name, int32(x))
}

func (Value_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_37b5b141da493253, []int{0, 0}
}

type List_Type int32

const (
	List_EMPTY       List_Type = 0
	List_CONS        List_Type = 1
	List_QUERY_CELLS List_Type = 2
	List_MAP         List_Type = 3
	List_FILTER      List_Type = 4
	List_SLICE       List_Type = 5
	List_CONCAT      List_Type = 6
)

var List_Type_name = map[int32]string{
	0: "EMPTY",
	1: "CONS",
	2: "QUERY_CELLS",
	3: "MAP",
	4: "FILTER",
	5: "SLICE",
	6: "CONCAT",
}

var List_Type_value = map[string]int32{
	"EMPTY":       0,
	"CONS":        1,
	"QUERY_CELLS": 2,
	"MAP":         3,
	"FILTER":      4,
	"SLICE":       5,
	"CONCAT":      6,
}

func (x List_Type) String() string {
	return proto.EnumName(List_Type_name, int32(x))
}

func (List_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_37b5b141da493253, []int{1, 0}
}

type Value struct {
	T Value_Type `protobuf:"varint,1,opt,name=t,proto3,enum=ast.Value_Type" json:"t,omitempty"`
	// Types that are valid to be assigned to Primitive:
	//	*Value_B
	//	*Value_U
	//	*Value_Raw
	//	*Value_Field
	//	*Value_Op
	Primitive            isValue_Primitive `protobuf_oneof:"primitive"`
	L                    *List             `protobuf:"bytes,7,opt,name=l,proto3" json:"l,omitempty"`
	Children             []*Value          `protobuf:"bytes,8,rep,name=children,proto3" json:"children,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_37b5b141da493253, []int{0}
}

func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetT() Value_Type {
	if m != nil {
		return m.T
	}
	return Value_UINT64
}

type isValue_Primitive interface {
	isValue_Primitive()
}

type Value_B struct {
	B bool `protobuf:"varint,2,opt,name=b,proto3,oneof"`
}

type Value_U struct {
	U uint64 `protobuf:"varint,3,opt,name=u,proto3,oneof"`
}

type Value_Raw struct {
	Raw []byte `protobuf:"bytes,4,opt,name=raw,proto3,oneof"`
}

type Value_Field struct {
	Field Field `protobuf:"varint,5,opt,name=field,proto3,enum=ast.Field,oneof"`
}

type Value_Op struct {
	Op Op `protobuf:"varint,6,opt,name=op,proto3,enum=ast.Op,oneof"`
}

func (*Value_B) isValue_Primitive() {}

func (*Value_U) isValue_Primitive() {}

func (*Value_Raw) isValue_Primitive() {}

func (*Value_Field) isValue_Primitive() {}

func (*Value_Op) isValue_Primitive() {}

func (m *Value) GetPrimitive() isValue_Primitive {
	if m != nil {
		return m.Primitive
	}
	return nil
}

func (m *Value) GetB() bool {
	if x, ok := m.GetPrimitive().(*Value_B); ok {
		return x.B
	}
	return false
}

func (m *Value) GetU() uint64 {
	if x, ok := m.GetPrimitive().(*Value_U); ok {
		return x.U
	}
	return 0
}

func (m *Value) GetRaw() []byte {
	if x, ok := m.GetPrimitive().(*Value_Raw); ok {
		return x.Raw
	}
	return nil
}

func (m *Value) GetField() Field {
	if x, ok := m.GetPrimitive().(*Value_Field); ok {
		return x.Field
	}
	return Field_CAPACITY
}

func (m *Value) GetOp() Op {
	if x, ok := m.GetPrimitive().(*Value_Op); ok {
		return x.Op
	}
	return Op_HASH
}

func (m *Value) GetL() *List {
	if m != nil {
		return m.L
	}
	return nil
}

func (m *Value) GetChildren() []*Value {
	if m != nil {
		return m.Children
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Value) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Value_B)(nil),
		(*Value_U)(nil),
		(*Value_Raw)(nil),
		(*Value_Field)(nil),
		(*Value_Op)(nil),
	}
}

type List struct {
	T                    List_Type `protobuf:"varint,1,opt,name=t,proto3,enum=ast.List_Type" json:"t,omitempty"`
	Values               []*Value  `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	Children             []*List   `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *List) Reset()         { *m = List{} }
func (m *List) String() string { return proto.CompactTextString(m) }
func (*List) ProtoMessage()    {}
func (*List) Descriptor() ([]byte, []int) {
	return fileDescriptor_37b5b141da493253, []int{1}
}

func (m *List) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_List.Unmarshal(m, b)
}
func (m *List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_List.Marshal(b, m, deterministic)
}
func (m *List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_List.Merge(m, src)
}
func (m *List) XXX_Size() int {
	return xxx_messageInfo_List.Size(m)
}
func (m *List) XXX_DiscardUnknown() {
	xxx_messageInfo_List.DiscardUnknown(m)
}

var xxx_messageInfo_List proto.InternalMessageInfo

func (m *List) GetT() List_Type {
	if m != nil {
		return m.T
	}
	return List_EMPTY
}

func (m *List) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *List) GetChildren() []*List {
	if m != nil {
		return m.Children
	}
	return nil
}

type Call struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Result               *Value   `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Call) Reset()         { *m = Call{} }
func (m *Call) String() string { return proto.CompactTextString(m) }
func (*Call) ProtoMessage()    {}
func (*Call) Descriptor() ([]byte, []int) {
	return fileDescriptor_37b5b141da493253, []int{2}
}

func (m *Call) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Call.Unmarshal(m, b)
}
func (m *Call) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Call.Marshal(b, m, deterministic)
}
func (m *Call) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Call.Merge(m, src)
}
func (m *Call) XXX_Size() int {
	return xxx_messageInfo_Call.Size(m)
}
func (m *Call) XXX_DiscardUnknown() {
	xxx_messageInfo_Call.DiscardUnknown(m)
}

var xxx_messageInfo_Call proto.InternalMessageInfo

func (m *Call) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Call) GetResult() *Value {
	if m != nil {
		return m.Result
	}
	return nil
}

type Root struct {
	Calls                []*Call  `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Root) Reset()         { *m = Root{} }
func (m *Root) String() string { return proto.CompactTextString(m) }
func (*Root) ProtoMessage()    {}
func (*Root) Descriptor() ([]byte, []int) {
	return fileDescriptor_37b5b141da493253, []int{3}
}

func (m *Root) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Root.Unmarshal(m, b)
}
func (m *Root) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Root.Marshal(b, m, deterministic)
}
func (m *Root) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Root.Merge(m, src)
}
func (m *Root) XXX_Size() int {
	return xxx_messageInfo_Root.Size(m)
}
func (m *Root) XXX_DiscardUnknown() {
	xxx_messageInfo_Root.DiscardUnknown(m)
}

var xxx_messageInfo_Root proto.InternalMessageInfo

func (m *Root) GetCalls() []*Call {
	if m != nil {
		return m.Calls
	}
	return nil
}

func init() {
	proto.RegisterEnum("ast.Field", Field_name, Field_value)
	proto.RegisterEnum("ast.Op", Op_name, Op_value)
	proto.RegisterEnum("ast.Value_Type", Value_Type_name, Value_Type_value)
	proto.RegisterEnum("ast.List_Type", List_Type_name, List_Type_value)
	proto.RegisterType((*Value)(nil), "ast.Value")
	proto.RegisterType((*List)(nil), "ast.List")
	proto.RegisterType((*Call)(nil), "ast.Call")
	proto.RegisterType((*Root)(nil), "ast.Root")
}

func init() { proto.RegisterFile("ast.proto", fileDescriptor_37b5b141da493253) }

var fileDescriptor_37b5b141da493253 = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x53, 0xcb, 0x6e, 0xdb, 0x48,
	0x10, 0xd4, 0xf0, 0x25, 0xb1, 0xe5, 0xc7, 0x78, 0x2e, 0xcb, 0x05, 0x76, 0xb1, 0x5a, 0x1a, 0x4e,
	0x04, 0x1f, 0x24, 0xc0, 0x09, 0x72, 0x0c, 0x40, 0x51, 0x63, 0x8b, 0x08, 0x45, 0xd2, 0x43, 0xca,
	0xb0, 0x92, 0x83, 0x40, 0xd9, 0x8c, 0xcd, 0x84, 0xb2, 0x08, 0x91, 0x72, 0x9c, 0x2f, 0xc8, 0x07,
	0xe4, 0x9c, 0x0f, 0xca, 0x5f, 0x05, 0x3d, 0xf2, 0x0b, 0xc9, 0xad, 0xba, 0xab, 0xd4, 0x9c, 0xaa,
	0x6e, 0x81, 0x99, 0x56, 0x75, 0xaf, 0x5c, 0x2d, 0xeb, 0x25, 0x53, 0xd3, 0xaa, 0xb6, 0xbf, 0xa9,
	0xa0, 0x9f, 0xa5, 0xc5, 0x3a, 0x63, 0xff, 0x02, 0xa9, 0x2d, 0xd2, 0x21, 0xdd, 0x9d, 0xa3, 0xdd,
	0x1e, 0xaa, 0x64, 0xbb, 0x97, 0x7c, 0x2d, 0x33, 0x41, 0x6a, 0xb6, 0x03, 0x64, 0x6e, 0x29, 0x1d,
	0xd2, 0x6d, 0x8d, 0x1a, 0x82, 0xcc, 0xb1, 0x5e, 0x5b, 0x6a, 0x87, 0x74, 0x35, 0xac, 0xd7, 0x8c,
	0x81, 0xba, 0x4a, 0xbf, 0x58, 0x5a, 0x87, 0x74, 0xb7, 0x46, 0x0d, 0x81, 0x05, 0xb3, 0x41, 0xff,
	0x98, 0x67, 0xc5, 0xa5, 0xa5, 0xcb, 0xb1, 0x20, 0xc7, 0x1e, 0x63, 0x67, 0xd4, 0x10, 0x1b, 0x8a,
	0xfd, 0x0d, 0xca, 0xb2, 0xb4, 0x0c, 0x29, 0x68, 0x4a, 0x41, 0x58, 0x8e, 0x1a, 0x42, 0x59, 0x96,
	0xec, 0x2f, 0x20, 0x85, 0xd5, 0xec, 0x90, 0x6e, 0xfb, 0xc8, 0x94, 0x8c, 0x9f, 0x57, 0xb5, 0x20,
	0x05, 0x7b, 0x01, 0xad, 0x8b, 0xeb, 0xbc, 0xb8, 0x5c, 0x65, 0x37, 0x56, 0xab, 0xa3, 0x76, 0xdb,
	0xf7, 0xa3, 0xe5, 0x8b, 0xc5, 0x23, 0x67, 0xff, 0x20, 0xa0, 0xe1, 0xfb, 0x19, 0x80, 0x31, 0xf1,
	0x82, 0xe4, 0xcd, 0x6b, 0xda, 0x60, 0x2d, 0xd0, 0x06, 0x61, 0xe8, 0x53, 0xc2, 0x4c, 0xd0, 0x07,
	0xd3, 0x84, 0xc7, 0x54, 0x61, 0xdb, 0x60, 0xfa, 0xde, 0x19, 0x9f, 0xb9, 0xdc, 0xf7, 0xa9, 0x8a,
	0xcc, 0xb1, 0xc7, 0xfd, 0x21, 0xd5, 0x98, 0x01, 0x4a, 0x18, 0x51, 0x9d, 0x35, 0x41, 0x0d, 0x3c,
	0x9f, 0x1a, 0x08, 0x1c, 0x71, 0x42, 0xf7, 0x50, 0x14, 0x39, 0xc2, 0x19, 0x53, 0x86, 0x33, 0x7d,
	0x2f, 0x4e, 0xe8, 0xff, 0xd8, 0x74, 0xa2, 0xc8, 0x9f, 0x52, 0x1b, 0x3f, 0x2a, 0xf8, 0x70, 0xe2,
	0x72, 0xba, 0x8f, 0x38, 0x76, 0x85, 0x17, 0x25, 0xd4, 0x41, 0xb1, 0xfc, 0xcc, 0x60, 0xd0, 0x06,
	0xb3, 0x5c, 0xe5, 0x8b, 0xbc, 0xce, 0x6f, 0x33, 0xfb, 0x27, 0x01, 0x0d, 0x0d, 0xb2, 0x7f, 0x9e,
	0x16, 0xb1, 0xf3, 0x68, 0xfb, 0x71, 0x0f, 0x36, 0x18, 0xb7, 0x68, 0xb3, 0xb2, 0x94, 0x3f, 0x9c,
	0xdf, 0x33, 0xec, 0xe0, 0x59, 0x3e, 0xaa, 0x54, 0x3d, 0xcb, 0xef, 0x29, 0x9e, 0xf3, 0xfb, 0x74,
	0x4c, 0xd0, 0xf9, 0x38, 0x4a, 0xa6, 0x9b, 0x70, 0xdc, 0x30, 0x88, 0x29, 0x61, 0xbb, 0xd0, 0x3e,
	0x9d, 0x70, 0x31, 0x95, 0x91, 0x60, 0x44, 0x4d, 0x50, 0xc7, 0x4e, 0x44, 0x55, 0xf4, 0x72, 0xec,
	0xf9, 0x09, 0x17, 0x54, 0xc3, 0x9f, 0xc6, 0xbe, 0xe7, 0x72, 0xaa, 0x63, 0xdb, 0x0d, 0x03, 0xd7,
	0x49, 0xa8, 0x61, 0xbf, 0x05, 0xcd, 0x4d, 0x8b, 0x82, 0x31, 0xd0, 0x6e, 0xd2, 0x45, 0x26, 0xdd,
	0x98, 0x42, 0x62, 0x34, 0xb0, 0xca, 0xaa, 0x75, 0x51, 0xcb, 0xeb, 0xf9, 0xcd, 0xc0, 0x86, 0xb1,
	0x5f, 0x82, 0x26, 0x96, 0xcb, 0x9a, 0xfd, 0x07, 0xfa, 0x45, 0x5a, 0x14, 0x95, 0x45, 0x9e, 0xb9,
	0xc0, 0xc9, 0x62, 0xd3, 0x3f, 0xfc, 0x00, 0xba, 0xbc, 0x27, 0xb6, 0x05, 0x2d, 0xd7, 0x89, 0x1c,
	0xd7, 0x7b, 0xb0, 0x31, 0x74, 0x12, 0x87, 0x12, 0xb9, 0x99, 0xd0, 0x7d, 0x47, 0x15, 0x44, 0xc9,
	0x34, 0xe2, 0x54, 0xc5, 0x65, 0xbb, 0xe1, 0x90, 0xcf, 0x46, 0x4e, 0x3c, 0xa2, 0x1a, 0x96, 0x88,
	0x66, 0x92, 0xd5, 0x51, 0xe7, 0x88, 0x93, 0x98, 0x1a, 0x87, 0xdf, 0x09, 0x28, 0x61, 0x89, 0x0d,
	0xa9, 0x6c, 0xc8, 0x1b, 0x08, 0x13, 0x4a, 0x10, 0x9c, 0xf0, 0x84, 0x2a, 0x98, 0x92, 0xf4, 0x3f,
	0xdb, 0x1c, 0x92, 0x8a, 0xe2, 0xc8, 0x9f, 0xc4, 0x9b, 0x68, 0xc6, 0x5e, 0x30, 0x89, 0xa9, 0x2e,
	0x03, 0x3e, 0x9d, 0x38, 0x0f, 0xd7, 0x13, 0x0c, 0x69, 0x53, 0xde, 0x95, 0xa0, 0x2d, 0xf9, 0x40,
	0x1e, 0xc7, 0xd4, 0x64, 0x7b, 0xb0, 0x8d, 0x68, 0x16, 0x8a, 0xd9, 0x46, 0x0d, 0xa8, 0xf6, 0x79,
	0x40, 0xdb, 0x38, 0xc1, 0x0b, 0x86, 0xfc, 0x9c, 0x6e, 0x0d, 0x0e, 0xde, 0xef, 0x5f, 0xe5, 0xf5,
	0xf5, 0x7a, 0xde, 0xbb, 0x58, 0x2e, 0xfa, 0x77, 0x77, 0xeb, 0xec, 0x53, 0x9e, 0xf5, 0xd3, 0x9b,
	0x7c, 0x91, 0x5e, 0xad, 0xab, 0x7e, 0xf9, 0xf9, 0xaa, 0x9f, 0x56, 0xf5, 0xdc, 0x90, 0x7f, 0xf2,
	0x57, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x50, 0x57, 0xb9, 0xf1, 0x03, 0x00, 0x00,
}
